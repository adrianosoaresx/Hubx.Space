# Generated by Django 5.2.2 on 2025-08-07 19:04

import accounts.models
import core.fields
import django.contrib.auth.validators
import django.core.validators
import django.utils.timezone
import phonenumber_field.modelfields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="AccountToken",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("deleted", models.BooleanField(default=False)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                (
                    "codigo",
                    models.CharField(
                        db_index=True, default=accounts.models.generate_secure_token, max_length=64, unique=True
                    ),
                ),
                (
                    "tipo",
                    models.CharField(
                        choices=[
                            ("email_confirmation", "Confirmação de Email"),
                            ("password_reset", "Redefinição de Senha"),
                        ],
                        max_length=20,
                    ),
                ),
                ("expires_at", models.DateTimeField()),
                ("used_at", models.DateTimeField(blank=True, null=True)),
                ("ip_gerado", models.GenericIPAddressField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "Token de Conta",
                "verbose_name_plural": "Tokens de Conta",
            },
        ),
        migrations.CreateModel(
            name="LoginAttempt",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("deleted", models.BooleanField(default=False)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("email", models.EmailField(max_length=254)),
                ("sucesso", models.BooleanField(default=False)),
                ("ip", models.GenericIPAddressField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "Tentativa de Login",
                "verbose_name_plural": "Tentativas de Login",
            },
        ),
        migrations.CreateModel(
            name="MediaTag",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("deleted", models.BooleanField(default=False)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("nome", models.CharField(max_length=50, unique=True)),
            ],
            options={
                "verbose_name": "Tag de Mídia",
                "verbose_name_plural": "Tags de Mídia",
            },
        ),
        migrations.CreateModel(
            name="SecurityEvent",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("deleted", models.BooleanField(default=False)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("evento", models.CharField(max_length=50)),
                ("ip", models.GenericIPAddressField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "Evento de Segurança",
                "verbose_name_plural": "Eventos de Segurança",
            },
        ),
        migrations.CreateModel(
            name="UserMedia",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("deleted", models.BooleanField(default=False)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("file", models.FileField(upload_to="user_media/")),
                ("descricao", models.CharField(blank=True, max_length=255, verbose_name="Descrição")),
            ],
            options={
                "verbose_name": "Mídia do Usuário",
                "verbose_name_plural": "Mídias do Usuário",
            },
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                ("last_login", models.DateTimeField(blank=True, null=True, verbose_name="last login")),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                ("first_name", models.CharField(blank=True, max_length=150, verbose_name="first name")),
                ("last_name", models.CharField(blank=True, max_length=150, verbose_name="last name")),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                ("date_joined", models.DateTimeField(default=django.utils.timezone.now, verbose_name="date joined")),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("deleted", models.BooleanField(default=False)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                (
                    "username",
                    models.CharField(
                        error_messages={"unique": "A user with that username already exists."},
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                        verbose_name="username",
                    ),
                ),
                ("email", models.EmailField(db_index=True, max_length=254, unique=True, verbose_name="email address")),
                (
                    "phone_number",
                    phonenumber_field.modelfields.PhoneNumberField(
                        blank=True,
                        help_text="Ex.: +55 48 99999-0000",
                        max_length=128,
                        null=True,
                        region="BR",
                        verbose_name="Telefone",
                    ),
                ),
                (
                    "address",
                    models.CharField(
                        blank=True,
                        help_text="Rua, número, complemento, cidade/UF",
                        max_length=255,
                        verbose_name="Endereço",
                    ),
                ),
                ("birth_date", models.DateField(blank=True, null=True, verbose_name="Data de nascimento")),
                (
                    "cpf",
                    models.CharField(
                        blank=True,
                        max_length=14,
                        null=True,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Digite um CPF válido no formato 000.000.000-00.",
                                regex="^\\d{3}\\.?\\d{3}\\.?\\d{3}-?\\d{2}$",
                            )
                        ],
                        verbose_name="CPF",
                    ),
                ),
                ("nome_completo", models.CharField(blank=True, max_length=255)),
                ("biografia", models.TextField(blank=True)),
                ("cover", models.ImageField(blank=True, null=True, upload_to="users/capas/")),
                ("fone", models.CharField(blank=True, max_length=20)),
                ("whatsapp", models.CharField(blank=True, max_length=20)),
                ("avatar", models.ImageField(blank=True, null=True, upload_to="avatars/")),
                ("endereco", models.CharField(blank=True, max_length=255)),
                ("cidade", models.CharField(blank=True, max_length=100)),
                ("estado", models.CharField(blank=True, max_length=2)),
                ("cep", models.CharField(blank=True, max_length=10)),
                ("facebook", core.fields.URLField(blank=True)),
                ("twitter", core.fields.URLField(blank=True)),
                ("instagram", core.fields.URLField(blank=True)),
                ("linkedin", core.fields.URLField(blank=True)),
                ("website", core.fields.URLField(blank=True)),
                ("redes_sociais", models.JSONField(blank=True, default=dict, null=True)),
                ("idioma", models.CharField(blank=True, max_length=10)),
                ("fuso_horario", models.CharField(blank=True, max_length=50)),
                ("perfil_publico", models.BooleanField(default=True)),
                ("mostrar_email", models.BooleanField(default=True)),
                ("mostrar_telefone", models.BooleanField(default=False)),
                ("chave_publica", models.TextField(blank=True, null=True, verbose_name="Chave pública")),
                ("failed_login_attempts", models.PositiveSmallIntegerField(default=0)),
                ("lock_expires_at", models.DateTimeField(blank=True, null=True)),
                ("exclusao_confirmada", models.BooleanField(default=False)),
                ("two_factor_enabled", models.BooleanField(default=False)),
                ("two_factor_secret", core.fields.EncryptedCharField(blank=True, max_length=128, null=True)),
                ("email_confirmed", models.BooleanField(default=False)),
                (
                    "user_type",
                    models.CharField(
                        choices=[
                            ("root", "Root"),
                            ("admin", "Admin"),
                            ("coordenador", "Coordenador"),
                            ("nucleado", "Nucleado"),
                            ("associado", "Associado"),
                            ("convidado", "Convidado"),
                        ],
                        default="convidado",
                        max_length=20,
                        verbose_name="Tipo de Usuário",
                    ),
                ),
                ("is_associado", models.BooleanField(default=False, verbose_name="É associado")),
                ("is_coordenador", models.BooleanField(default=False, verbose_name="É coordenador")),
                ("connections", models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL)),
                (
                    "followers",
                    models.ManyToManyField(blank=True, related_name="following", to=settings.AUTH_USER_MODEL),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
            ],
            options={
                "verbose_name": "Usuário",
                "verbose_name_plural": "Usuários",
            },
            managers=[
                ("objects", accounts.models.CustomUserManager()),
            ],
        ),
    ]
